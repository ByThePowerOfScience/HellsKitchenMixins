buildscript {
	repositories {
		// These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
	id 'eclipse'
	id 'idea'
	id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
	archivesName = mod_id
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
	mappings channel: mapping_channel, version: mapping_version
	
	copyIdeResources = true
	
	runs {
		// applies to all the run configs below
		configureEach {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'
			
			
			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'
			
			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
		
		client {
			// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		
		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}
		
		// This run config launches GameTestServer and runs all registered gametests, then exits.
		// By default, the server will crash when no gametests are provided.
		// The gametest system is also enabled by default for other run configs under the /test command.
		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}
		
		data {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory project.file('run-data')
			
			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	
	config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		url 'https://cursemaven.com'
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		url 'https://jitpack.io'
		content {
			includeGroup "com.github.rtyley"
		}
	}
	maven {
		// Shedaniel's maven (Architectury API)
		url = "https://maven.architectury.dev"
		content {
			includeGroup "dev.architectury"
		}
	}
	maven {
		url "https://maven.latvian.dev/releases"
		content {
			includeGroup "dev.latvian.mods"
			includeGroup "dev.latvian.apps"
		}
	}
	maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
	maven { url = "https://maven.ithundxr.dev/mirror" } // Registrate
	maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
}

dependencies {
	//noinspection VulnerableLibrariesLocal
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
	
	compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
	implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
		jarJar.ranged(it, "[0.4.1,)")
	}
	
	var kubejs_version = "2001.6.5-build.20"
	// ForgeGradle
	implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
	implementation fg.deobf("dev.latvian.mods:kubejs-create-forge:2001.3.0-build.8")
// these two are unfortunately needed since fg.deobf doesn't respect transitive dependencies yet
	implementation fg.deobf("dev.latvian.mods:rhino-forge:2001.2.3-build.10")
	implementation fg.deobf("dev.architectury:architectury-forge:9.2.14")
	
	//region CreateMod
	implementation(fg.deobf("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false })
	implementation(fg.deobf("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}"))
	compileOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}"))
	runtimeOnly(fg.deobf("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}"))
	implementation(fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}"))
	//endregion
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
							 forge_version       : forge_version, forge_version_range: forge_version_range,
							 loader_version_range: loader_version_range,
							 mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
							 mod_authors         : mod_authors, mod_description: mod_description,]
	
	inputs.properties replaceProperties
	
	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
	manifest {
		attributes(["Specification-Title"     : mod_id,
					"Specification-Vendor"    : mod_authors,
					"Specification-Version"   : "1", // We are version 1 of ourselves
					"Implementation-Title"    : project.name,
					"Implementation-Version"  : project.jar.archiveVersion,
					"Implementation-Vendor"   : mod_authors,
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
	}
	
	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
